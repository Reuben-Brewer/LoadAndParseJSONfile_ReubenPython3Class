# -*- coding: utf-8 -*-

'''
Reuben Brewer, Ph.D.
reuben.brewer@gmail.com
www.reubotics.com

Apache 2 License
Software Revision B, 07/16/2025

Verified working on: Python 3.11/3.12 for Windows 10, 11 64-bit and Raspberry Pi Bookworm.
'''

__author__ = 'reuben.brewer'

##########################################################################################################
import os
import sys
import platform
import time
import traceback
import json
from collections import OrderedDict
from copy import * #for deep_copy of dicts
import inspect #To enable 'TellWhichFileWereIn'

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
##########################################################################################################

##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
class LoadAndParseJSONfile_ReubenPython3Class(FileSystemEventHandler):

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    def __init__(self, SetupDict):

        ##########################################################################################################
        ##########################################################################################################
        self.EXIT_PROGRAM_FLAG = 0
        self.OBJECT_CREATED_SUCCESSFULLY_FLAG = 0
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        self.OSnameStr = LoadAndParseJSONfile_ReubenPython3Class.GetOSnameStr()
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        self.MostRecentDict = dict()
        self.counter = 0
        self.CurrentTriggerTime = 0.0
        self.LastTriggerTime = 0.0
        self.MinTimeBetweenTriggerEvents = 0.5

        self.ObserverObject = Observer() #Set up observer
        self.ObserverObject.start()
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        if "FilenameFullPathsToWatchList" in SetupDict:
            self.FilenameFullPathsToWatchList = SetupDict["FilenameFullPathsToWatchList"]
        else:
            print("LoadAndParseJSONfile_ReubenPython3Class __init__: Error, must pass in FilenameFullPathsToWatchList")
            return
        ##########################################################################################################
        ##########################################################################################################

        ########################################################################################################## Load individual files
        ##########################################################################################################
        for FilenameFullPath in self.FilenameFullPathsToWatchList:
            print("FilenameFullPath: " + str(FilenameFullPath))

            DataDictFromJSONfile = LoadAndParseJSONfile_ReubenPython3Class.LoadAndParseJSONfile(FilenameFullPath,
                                                                             USE_PassThrough0and1values_ExitProgramOtherwise_FOR_FLAGS = 1,
                                                                             PauseForInputOnExceptionFlag = 0,
                                                                             PrintInfoForDebuggingFlag = 1) #unicorn

            self.MostRecentDict[FilenameFullPath] = dict([("FilenameFullPath", FilenameFullPath),
                                                    ("EventCounter", 0),
                                                    ("LastTriggerTime", -1.11111),
                                                    ("DataDictFromJSONfile", DataDictFromJSONfile),
                                                    ("EventCounterAtWhichMainProgramLastUpdated", -1)])
        ##########################################################################################################
        ##########################################################################################################

        ########################################################################################################## Register directories to watch for modifications to files.
        ##########################################################################################################
        #Add watch for each file's directory (watchdog watches directories, not individual files)
        SetOfWatchedDirectories = set(os.path.dirname(path) for path in self.FilenameFullPathsToWatchList)
        for DirectoryFullpath in SetOfWatchedDirectories:
            print("LoadAndParseJSONfile_ReubenPython3Class __init__: Scheduled directory " + str(DirectoryFullpath) + " for ObserverObject.")
            self.ObserverObject.schedule(self, DirectoryFullpath, recursive=False)
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        #print("LoadAndParseJSONfile_ReubenPython3Class __init__: self.MostRecentDict: " + self.ConvertDictToProperlyFormattedStringForPrinting(self.MostRecentDict))
        self.OBJECT_CREATED_SUCCESSFULLY_FLAG = 1
        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    def ExitProgram_Callback(self):

        print("LoadAndParseJSONfile_ReubenPython3Class: ExitProgram_Callback event fired.")

        self.ObserverObject .stop()
        self.ObserverObject .join()

        self.EXIT_PROGRAM_FLAG = 1

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    @staticmethod
    def GetOSnameStr(PrintInfoForDebuggingFlag = 0):

        ##########################################################################################################
        ##########################################################################################################
        try:

            ##########################################################################################################
            if platform.system() == "Linux":

                if "raspberrypi" in platform.uname():  # os.uname() doesn't work in windows
                    OSnameStr = "pi"

                else:
                    OSnameStr = "linux"
            ##########################################################################################################

            ##########################################################################################################
            elif platform.system() == "Windows":
                OSnameStr = "windows"
            ##########################################################################################################

            ##########################################################################################################
            elif platform.system() == "Darwin":
                OSnameStr = "mac"
            ##########################################################################################################

            ##########################################################################################################
            else:
                OSnameStr = "other"
            ##########################################################################################################

            ##########################################################################################################
            if PrintInfoForDebuggingFlag == 1:
                print("GetOSnameStr: The OS is: " + OSnameStr)
            ##########################################################################################################

            ##########################################################################################################
            return OSnameStr
            ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        except:

            exceptions = sys.exc_info()[0]
            print("LoadAndParseJSONfile_ReubenPython3Class __init__: GetOSnameStr, exceptions: %s" % exceptions)
            #traceback.print_exc()
            return ""

        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    @staticmethod
    def TellWhichFileWereIn():

        # We used to use this method, but it gave us the root calling file, not the class calling file
        # absolute_file_path = os.path.dirname(os.path.realpath(sys.argv[0]))
        # filename = absolute_file_path[absolute_file_path.rfind("\\") + 1:]

        frame = inspect.stack()[1]
        filename = frame[1][frame[1].rfind("\\") + 1:]
        filename = filename.replace(".py", "")

        return filename
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    @staticmethod
    def PassThrough0and1values_ExitProgramOtherwise(InputNameString, InputNumber, ExitProgramIfFailureFlag = 0):

        ##########################################################################################################
        ##########################################################################################################
        try:

            ##########################################################################################################
            InputNumber_ConvertedToFloat = float(InputNumber)
            ##########################################################################################################

        except:

            ##########################################################################################################
            exceptions = sys.exc_info()[0]
            print(LoadAndParseJSONfile_ReubenPython3Class.TellWhichFileWereIn() + ", PassThrough0and1values_ExitProgramOtherwise Error. InputNumber '" + InputNameString + "' must be a numerical value, Exceptions: %s" % exceptions)

            ##########################
            if ExitProgramIfFailureFlag == 1:
                sys.exit()
            else:
                return -1
            ##########################

            ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        try:

            ##########################################################################################################
            if InputNumber_ConvertedToFloat == 0.0 or InputNumber_ConvertedToFloat == 1.0:
                return InputNumber_ConvertedToFloat

            else:

                print(LoadAndParseJSONfile_ReubenPython3Class.TellWhichFileWereIn() + ", PassThrough0and1values_ExitProgramOtherwise Error. '" +
                              str(InputNameString) +
                              "' must be 0 or 1 (value was " +
                              str(InputNumber_ConvertedToFloat) +
                              ").")

                ##########################
                if ExitProgramIfFailureFlag == 1:
                    sys.exit()

                else:
                    return -1
                ##########################

            ##########################################################################################################

        except:

            ##########################################################################################################
            exceptions = sys.exc_info()[0]
            print(LoadAndParseJSONfile_ReubenPython3Class.TellWhichFileWereIn() + ", PassThrough0and1values_ExitProgramOtherwise Error, Exceptions: %s" % exceptions)

            ##########################
            if ExitProgramIfFailureFlag == 1:
                sys.exit()
            else:
                return -1
            ##########################

            ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    @staticmethod
    def LoadAndParseJSONfile(JSONFilenameFullPath, USE_PassThrough0and1values_ExitProgramOtherwise_FOR_FLAGS = 1, PauseForInputOnExceptionFlag = 0, PrintInfoForDebuggingFlag = 1):

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        try:

            GlobalsDict = dict()
            Key = ""

            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################
            with open(JSONFilenameFullPath) as ParametersToBeLoaded_JSONfileObject:
                ParametersToBeLoaded_JSONfileParsedIntoDict = json.load(ParametersToBeLoaded_JSONfileObject)

            ParametersToBeLoaded_JSONfileObject.close()
            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################

            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################
            if PrintInfoForDebuggingFlag == 1: print("$$$$$$$$$$$$$$$$$$$$$$$$ LoadAndParseJSONfile, Start: " + JSONFilenameFullPath)

            for Key, Value in ParametersToBeLoaded_JSONfileParsedIntoDict.items():

                ##########################################################################################################
                ##########################################################################################################
                if USE_PassThrough0and1values_ExitProgramOtherwise_FOR_FLAGS == 1:

                    if Key.upper().find("FLAG") != -1:
                        GlobalsDict[Key] = LoadAndParseJSONfile_ReubenPython3Class.PassThrough0and1values_ExitProgramOtherwise(Key, Value)

                    else:
                        GlobalsDict[Key] = Value

                ##########################################################################################################
                ##########################################################################################################

                ##########################################################################################################
                ##########################################################################################################
                else:
                    GlobalsDict[Key] = Value
                ##########################################################################################################
                ##########################################################################################################

                ##########################################################################################################
                ##########################################################################################################
                if PrintInfoForDebuggingFlag == 1:
                    print(str(Key) + ": " + str(Value))
                ##########################################################################################################
                ##########################################################################################################

            if PrintInfoForDebuggingFlag == 1: print("$$$$$$$$$$$$$$$$$$$$$$$$ LoadAndParseJSONfile, End: " + JSONFilenameFullPath)

            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################

            return ParametersToBeLoaded_JSONfileParsedIntoDict
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        except:

            exceptions = sys.exc_info()[0]
            print("LoadAndParseJSONfile failed for " + JSONFilenameFullPath + ", Current Key = " + str(Key) + ", exceptions: %s" % exceptions)
            traceback.print_exc()

            if PauseForInputOnExceptionFlag == 1:
                input("Please press any Key to continue")

            return dict()
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

	##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    def ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(self, input, number_of_leading_numbers = 4, number_of_decimal_places = 3):

        number_of_decimal_places = max(1, number_of_decimal_places) #Make sure we're above 1

        ListOfStringsToJoin = []

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        if isinstance(input, str) == 1:
            ListOfStringsToJoin.append(input)
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        elif isinstance(input, int) == 1 or isinstance(input, float) == 1:
            element = float(input)
            prefix_string = "{:." + str(number_of_decimal_places) + "f}"
            element_as_string = prefix_string.format(element)

            ##########################################################################################################
            ##########################################################################################################
            if element >= 0:
                element_as_string = element_as_string.zfill(number_of_leading_numbers + number_of_decimal_places + 1 + 1)  # +1 for sign, +1 for decimal place
                element_as_string = "+" + element_as_string  # So that our strings always have either + or - signs to maintain the same string length
            else:
                element_as_string = element_as_string.zfill(number_of_leading_numbers + number_of_decimal_places + 1 + 1 + 1)  # +1 for sign, +1 for decimal place
            ##########################################################################################################
            ##########################################################################################################

            ListOfStringsToJoin.append(element_as_string)
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        elif isinstance(input, list) == 1:

            if len(input) > 0:
                for element in input: #RECURSION
                    ListOfStringsToJoin.append(self.ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(element, number_of_leading_numbers, number_of_decimal_places))

            else: #Situation when we get a list() or []
                ListOfStringsToJoin.append(str(input))

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        elif isinstance(input, tuple) == 1:

            if len(input) > 0:
                for element in input: #RECURSION
                    ListOfStringsToJoin.append("TUPLE" + self.ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(element, number_of_leading_numbers, number_of_decimal_places))

            else: #Situation when we get a list() or []
                ListOfStringsToJoin.append(str(input))

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        elif isinstance(input, dict) == 1:

            if len(input) > 0:
                for Key in input: #RECURSION
                    ListOfStringsToJoin.append(str(Key) + ": " + self.ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(input[Key], number_of_leading_numbers, number_of_decimal_places))

            else: #Situation when we get a dict()
                ListOfStringsToJoin.append(str(input))

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        else:
            ListOfStringsToJoin.append(str(input))
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        if len(ListOfStringsToJoin) > 1:

            ##########################################################################################################
            ##########################################################################################################

            ##########################################################################################################
            StringToReturn = ""
            for Index, StringToProcess in enumerate(ListOfStringsToJoin):

                ################################################
                if Index == 0: #The first element
                    if StringToProcess.find(":") != -1 and StringToProcess[0] != "{": #meaning that we're processing a dict()
                        StringToReturn = "{"
                    elif StringToProcess.find("TUPLE") != -1 and StringToProcess[0] != "(":  # meaning that we're processing a tuple
                        StringToReturn = "("
                    else:
                        StringToReturn = "["

                    StringToReturn = StringToReturn + StringToProcess.replace("TUPLE","") + ", "
                ################################################

                ################################################
                elif Index < len(ListOfStringsToJoin) - 1: #The middle elements
                    StringToReturn = StringToReturn + StringToProcess + ", "
                ################################################

                ################################################
                else: #The last element
                    StringToReturn = StringToReturn + StringToProcess

                    if StringToProcess.find(":") != -1 and StringToProcess[-1] != "}":  # meaning that we're processing a dict()
                        StringToReturn = StringToReturn + "}"
                    elif StringToProcess.find("TUPLE") != -1 and StringToProcess[-1] != ")":  # meaning that we're processing a tuple
                        StringToReturn = StringToReturn + ")"
                    else:
                        StringToReturn = StringToReturn + "]"

                ################################################

            ##########################################################################################################

            ##########################################################################################################
            ##########################################################################################################

        elif len(ListOfStringsToJoin) == 1:
            StringToReturn = ListOfStringsToJoin[0]

        else:
            StringToReturn = ListOfStringsToJoin

        return StringToReturn
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    def ConvertDictToProperlyFormattedStringForPrinting(self, DictToPrint, NumberOfDecimalsPlaceToUse = 3, NumberOfEntriesPerLine = 1, NumberOfTabsBetweenItems = 3):

        try:
            ProperlyFormattedStringForPrinting = ""
            ItemsPerLineCounter = 0

            for Key in DictToPrint:

                ##########################################################################################################
                if isinstance(DictToPrint[Key], dict): #RECURSION
                    ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + \
                                                         str(Key) + ":\n" + \
                                                         self.ConvertDictToProperlyFormattedStringForPrinting(DictToPrint[Key],
                                                                                                              NumberOfDecimalsPlaceToUse,
                                                                                                              NumberOfEntriesPerLine,
                                                                                                              NumberOfTabsBetweenItems)

                else:
                    ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + \
                                                         str(Key) + ": " + \
                                                         self.ConvertFloatToStringWithNumberOfLeadingNumbersAndDecimalPlaces_NumberOrListInput(DictToPrint[Key],
                                                                                                                                               0,
                                                                                                                                               NumberOfDecimalsPlaceToUse)
                ##########################################################################################################

                ##########################################################################################################
                if ItemsPerLineCounter < NumberOfEntriesPerLine - 1:
                    ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + "\t"*NumberOfTabsBetweenItems
                    ItemsPerLineCounter = ItemsPerLineCounter + 1
                else:
                    ProperlyFormattedStringForPrinting = ProperlyFormattedStringForPrinting + "\n"
                    ItemsPerLineCounter = 0
                ##########################################################################################################

            return ProperlyFormattedStringForPrinting

        except:
            exceptions = sys.exc_info()[0]
            print("ConvertDictToProperlyFormattedStringForPrinting, Exceptions: %s" % exceptions)
            return ""
            #traceback.print_exc()
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    def GetMostRecentDataDict(self):

        if self.EXIT_PROGRAM_FLAG == 0:

            return deepcopy(self.MostRecentDict) #deepcopy IS required as MostRecentDataDict contains lists.

        else:
            return dict()  # So that we're not returning variables during the close-down process.
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    def UpdateReadingRecord(self, FilenameFullPath, EventCounterAtWhichMainProgramLastUpdated):

        ##########################################################################################################
        try:
            if FilenameFullPath in self.MostRecentDict:

                self.MostRecentDict[FilenameFullPath]["EventCounterAtWhichMainProgramLastUpdated"] = EventCounterAtWhichMainProgramLastUpdated

            else:
                print("UpdateReadingRecord: Could not find the FilenameFullPath: " + str(FilenameFullPath))
        ##########################################################################################################

        ##########################################################################################################
        except:
            exceptions = sys.exc_info()[0]
            print("UpdateReadingRecord, event for for FilenameFullPath: " + str(FilenameFullPath) + ", Exceptions: %s" % exceptions)
            traceback.print_exc()
            ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    def on_any_event(self, Event, PrintInfoForDebuggingFlag = 0): #MUST BE NAMED "on_any_event" OR ELSE THE CALLBACK WON'T WORK. CAN'T NAME THE CALLBACK EXPLICITLY.

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        EventIsDirectory = Event.is_directory
        EventSourcePath = Event.src_path #.replace('//', '/').replace("/","//")
        EventType = Event.event_type

        ##########################################################################################################
        if self.OSnameStr == "windows":
            EventTypeOnWhichToTrigger = "modified"

        elif self.OSnameStr == "pi":
            EventTypeOnWhichToTrigger = "closed"

        else:
            EventTypeOnWhichToTrigger = "modified"
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        if PrintInfoForDebuggingFlag == 1:
            print("on_any_event: EventIsDirectory: " + str(EventIsDirectory) +
                  ", EventType: " + str(EventType) +
                  ", EventSourcePath: " + str(EventSourcePath))
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        if EventIsDirectory == False:

            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################
            if EventType == EventTypeOnWhichToTrigger:

                ##########################################################################################################
                ##########################################################################################################
                if EventSourcePath.find(".goutputstream") != -1 or EventSourcePath.find(".json") == -1:
                    pass
                ##########################################################################################################
                ##########################################################################################################

                ##########################################################################################################
                ##########################################################################################################
                else:

                    ##########################################################################################################
                    if EventSourcePath in self.MostRecentDict:

                        ######################################################
                        self.CurrentTriggerTime = time.time()
                        ######################################################

                        ######################################################
                        if self.CurrentTriggerTime - self.MostRecentDict[EventSourcePath]["LastTriggerTime"] >= self.MinTimeBetweenTriggerEvents:

                            DataDictFromJSONfile = self.LoadAndParseJSONfile(self.MostRecentDict[EventSourcePath]["FilenameFullPath"],
                                                                             USE_PassThrough0and1values_ExitProgramOtherwise_FOR_FLAGS=1,
                                                                             PauseForInputOnExceptionFlag=0,
                                                                             PrintInfoForDebuggingFlag=1)  # unicorn

                            self.MostRecentDict[EventSourcePath]["DataDictFromJSONfile"] = DataDictFromJSONfile

                            if PrintInfoForDebuggingFlag == 1:
                                print("Success: EventIsDirectory: " + str(EventIsDirectory) +
                                ", EventType: " + str(EventType) +
                                ", EventSourcePath: " + str(EventSourcePath) +
                                "EventCounter: " + str(self.MostRecentDict[EventSourcePath]["EventCounter"]))

                            self.MostRecentDict[EventSourcePath]["EventCounter"] = self.MostRecentDict[EventSourcePath]["EventCounter"] + 1
                            self.MostRecentDict[EventSourcePath]["LastTriggerTime"] = self.CurrentTriggerTime
                        ######################################################

                    ##########################################################################################################

                    ##########################################################################################################
                    else:
                        print(EventSourcePath + " not contained within 'self.MostRecentDict'.")
                    ##########################################################################################################

                ##########################################################################################################
                ##########################################################################################################

            ##########################################################################################################
            ##########################################################################################################
            ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
def GetGlobals(PrintForDebuggingFlag=0):

    GlobalsDict = dict() #Don't simply deepcopy() globals() because you can't pickle some objects.

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    try:

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        for Key, Value in globals().items():

            #######################################################################################################################
            #######################################################################################################################
            #######################################################################################################################
            try:

                #######################################################################################################################
                #######################################################################################################################
                ValueType = type(Value)

                ValueType_AllowedList = [bool,
                                        int,
                                        float,
                                        str,
                                        list,
                                        tuple,
                                        dict,
                                        type(None),# NoneType
                                        bytes,
                                        bytearray]
                #######################################################################################################################
                #######################################################################################################################

                #######################################################################################################################
                #######################################################################################################################
                if ValueType in ValueType_AllowedList:

                    #######################################################################################################################
                    try:
                        GlobalsDict[Key] = deepcopy(Value)

                        if PrintForDebuggingFlag == 1:
                            print(str(Key) + ": " + str(Value))
                    #######################################################################################################################

                    #######################################################################################################################
                    except Exception as e:
                        GlobalsDict[Key] = "CannotCopy"
                    #######################################################################################################################

                #######################################################################################################################
                #######################################################################################################################

                #######################################################################################################################
                #######################################################################################################################
                else:
                    GlobalsDict[Key] = "CannotCopy"
                #######################################################################################################################
                #######################################################################################################################

            #######################################################################################################################
            #######################################################################################################################
            #######################################################################################################################

            #######################################################################################################################
            #######################################################################################################################
            #######################################################################################################################
            except:
                GlobalsDict[Key] = "CannotCopy"
            #######################################################################################################################
            #######################################################################################################################
            #######################################################################################################################

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    except:
        exceptions = sys.exc_info()[0]
        print("GetGlobals: Exceptions: %s" % exceptions)
        #return GlobalsDict
        traceback.print_exc()
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    if PrintForDebuggingFlag == 1:
        print("%%% Start of GlobalsDict %%%" + str(GlobalsDict))

        for Key in GlobalsDict:
            print(str(Key) + ": " + str(GlobalsDict[Key]))

        print("%%% End of GlobalsDict %%%" + str(GlobalsDict))

    return GlobalsDict
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################

##########################################################################################################
##########################################################################################################
def ExitProgram_Callback(OptionalArugment = 0):
    global EXIT_PROGRAM_FLAG

    print("ExitProgram_Callback event fired!")

    EXIT_PROGRAM_FLAG = 1
##########################################################################################################
##########################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
def CheckForJSONfileChangesAndCopyDataToGlobalsIfNeeded():
    global LoadAndParseJSONfile_Object
    global LoadAndParseJSONfile_OPEN_FLAG
    global LoadAndParseJSONfile_MostRecentDict

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    if LoadAndParseJSONfile_OPEN_FLAG == 1:

        LoadAndParseJSONfile_MostRecentDict = LoadAndParseJSONfile_Object.GetMostRecentDataDict()
        #print("LoadAndParseJSONfile_MostRecentDict: " + str(LoadAndParseJSONfile_MostRecentDict))

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################
        for FilenameFullPath in LoadAndParseJSONfile_MostRecentDict:

            EventCounter = LoadAndParseJSONfile_MostRecentDict[FilenameFullPath]["EventCounter"]
            EventCounterAtWhichMainProgramLastUpdated = LoadAndParseJSONfile_MostRecentDict[FilenameFullPath]["EventCounterAtWhichMainProgramLastUpdated"]

            #######################################################################################################################
            #######################################################################################################################
            if EventCounter > EventCounterAtWhichMainProgramLastUpdated:

                DataDictFromJSONfile = LoadAndParseJSONfile_MostRecentDict[FilenameFullPath]["DataDictFromJSONfile"]

                #######################################################################################################################
                for Key in DataDictFromJSONfile:
                    globals()[Key] = DataDictFromJSONfile[Key]
                #######################################################################################################################

                #######################################################################################################################
                print("Updating global variables within " + FilenameFullPath)
                LoadAndParseJSONfile_Object.UpdateReadingRecord(FilenameFullPath, EventCounter)
                #######################################################################################################################

            #######################################################################################################################
            #######################################################################################################################

        #######################################################################################################################
        #######################################################################################################################
        #######################################################################################################################

    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################
    #######################################################################################################################

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
